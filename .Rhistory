}
m <- map("state")
m <- map("state")
pinkState
innout<-"http://www.lasvegas360.com/3428/in-n-out-burger-locations-and-store-numbers/"
innoutlink <- read_html(innout)
innouthtml <- html_nodes(innoutlink, css="td") # get this with sel gadget
innouttext <- html_text(innouthtml)
charr <- innouttext
#initialize vars to later be made a data frame
split <- which(charr == "74")
numbers <- 1
city <-1
adr <- 1
state <- 1
date <- 1
i = 1
j = 1;
while(i < 29) {
numbers[j] <- charr[i]
i <- i + 2
city[j] <- charr[i]
i <- i + 1
adr[j] <- charr[i]
i <- i + 1
state[j] <- charr[i]
i <- i + 1
date[j] <-charr[i]
i <- i + 1
j <- j + 1
}
i <- 30
j <- 6
while(i < (split)) {
numbers[j] = charr[i]
i = i + 2
city[j] <- charr[i]
i <- i + 1
adr[j] <- charr[i]
i <- i + 1
state[j] <- charr[i]
i <- i + 1
date[j] <-charr[i]
i <- i + 1
j = j + 1
}
i <- split
j <- j - 1 # 74, where it left off
while(i < length(charr)) {
numbers[j] = charr[i]
i = i + 1
city[j] <- charr[i]
i <- i + 1
adr[j] <- charr[i]
i <- i + 1
state[j] <- charr[i]
i <- i + 1
date[j] <-charr[i]
i <- i + 1
j = j + 1
}
ino <- data.frame(numbers, city, adr, state, date, stringsAsFactors = FALSE)
ino[5, "date"] <- (charr[29])
ino[5,"state"] <- "CA"
# get rid of whitespace
ino$state<-str_trim(ino$state, side="both")
# use the R pre-loaded state stuff
ino$fullState <- state.name[match(ino$state, state.abb)]
ggplot() + geom_bar(data=ino, aes(x=state)) + ggtitle("Distribution of the State Variable")
library(rvest)
library(dplyr)
library(stringr)
library(ggplot2)
library(maps)
library(ggmap)
library(RColorBrewer)
innout<-"http://www.lasvegas360.com/3428/in-n-out-burger-locations-and-store-numbers/"
innoutlink <- read_html(innout)
innouthtml <- html_nodes(innoutlink, css="td") # get this with sel gadget
innouttext <- html_text(innouthtml)
charr <- innouttext
#initialize vars to later be made a data frame
split <- which(charr == "74")
numbers <- 1
city <-1
adr <- 1
state <- 1
date <- 1
i = 1
j = 1;
while(i < 29) {
numbers[j] <- charr[i]
i <- i + 2
city[j] <- charr[i]
i <- i + 1
adr[j] <- charr[i]
i <- i + 1
state[j] <- charr[i]
i <- i + 1
date[j] <-charr[i]
i <- i + 1
j <- j + 1
}
i <- 30
j <- 6
while(i < (split)) {
numbers[j] = charr[i]
i = i + 2
city[j] <- charr[i]
i <- i + 1
adr[j] <- charr[i]
i <- i + 1
state[j] <- charr[i]
i <- i + 1
date[j] <-charr[i]
i <- i + 1
j = j + 1
}
i <- split
j <- j - 1 # 74, where it left off
while(i < length(charr)) {
numbers[j] = charr[i]
i = i + 1
city[j] <- charr[i]
i <- i + 1
adr[j] <- charr[i]
i <- i + 1
state[j] <- charr[i]
i <- i + 1
date[j] <-charr[i]
i <- i + 1
j = j + 1
}
ino <- data.frame(numbers, city, adr, state, date, stringsAsFactors = FALSE)
ino[5, "date"] <- (charr[29])
ino[5,"state"] <- "CA"
# get rid of whitespace
ino$state<-str_trim(ino$state, side="both")
# use the R pre-loaded state stuff
ino$fullState <- state.name[match(ino$state, state.abb)]
ggplot() + geom_bar(data=ino, aes(x=state)) + ggtitle("Distribution of the State Variable")
# In-N-Out is mostly in CA, however, they are also in 5 other states.
#clean up cities strings
ino$city <-str_trim(ino$city, side="left")
# add space and state onto city
ino$cityState <- paste(ino$city, ino$state, sep = " ")
us.cities$long[which(us.cities$name == "Long Beach CA")]
temp <- 1
# get farthest east in n out
# initialize variables
maxlonge = -10000
east <- "hi"
for(i in 1:length(ino$cityState)) {
temp <- us.cities$long[which(us.cities == ino$cityState[i])]
if(length(temp) >= 1) { # kept getting error when longitude not found
if(temp > maxlonge) {
maxlonge <- temp
east <- ino$cityState[i]
}
}
}
east
# Garland, TX is the eastern-most In-N-Out location
# get number of each states ino's
num.ino <- table(ino$fullState)
num.ino <- as.data.frame(num.ino)
pal <- brewer.pal(6, 'YlOrRd')
pal <- rev(pal)
num.ino$cols <- pal
colOrder <- c(pal[3], pal[1], pal[4],pal[6], pal[2], pal[5]) # what is the better way to do this?!
map("state", regions = num.ino$Var1, fill=TRUE, col = colOrder)
#get the data
dd <-"https://www.menuism.com/restaurant-locations/dunkin-donuts-181624/us"
ddlink <- read_html(dd)
ddhtml <- html_nodes(ddlink, css=".list-unstyled-links a") # get this with sel gadget
ddtext <- html_text(ddhtml)
ddraw <- ddtext
starbs <-"https://www.menuism.com/restaurant-locations/starbucks-coffee-39564/us"
starbslink <- read_html(starbs)
starbshtml <- html_nodes(starbslink, css=".list-unstyled-links a") # get this with sel gadget
starbstext <- html_text(starbshtml)
starbsraw <- starbstext
# extract number of locations
ddnums <- str_extract_all(ddraw, "\\([^()]+\\)") # get number with parentheses
ddnums <- substring(ddnums, 2, nchar(ddnums)-1) # get rid of parentheses
ddnums <- as.numeric(ddnums)
starbsnums <- str_extract_all(starbsraw, "\\([^()]+\\)") # get number with parentheses
starbsnums <- substring(starbsnums, 2, nchar(starbsnums)-1) # get rid of parentheses
starbsnums <- as.numeric(starbsnums)
#extract state names
ddraw <- str_replace(ddraw, "Dunkin' Donuts locations", "")
ddraw <- str_replace(ddraw, "\\([^()]+\\)", "")
ddraw <-str_trim(ddraw, side="right")
starbsraw <- str_replace(starbsraw, "Starbucks Coffee locations", "")
starbsraw <- str_replace(starbsraw, "\\([^()]+\\)", "")
starbsraw <-str_trim(starbsraw, side="right")
# put all data into a df
dd <- data.frame(ddraw, ddnums, stringsAsFactors = FALSE)
starbs <- data.frame(starbsraw, starbsnums, stringsAsFactors = FALSE)
# get num of states in map
m <- map("state")
mapsize <- length(m$names)
# initialize color array
stColors <- "green"
for(i in 1:mapsize) {
stColors[i] <- "dark green"
}
# get states where DD > Starbs
pinkState <- 1
j <- 0
for(i in 1:nrow(starbs)) {
if(dd$ddraw == sta)
if(dd$ddnums[i] > starbs$starbsnums[i]) {
pinkState[j] <- dd$ddraw[i]
j <- j + 1
}
}
stNames <- us.cities
combined <- as.data.frame(stNames)
View(combined)
stNames <- us.cities$name
combined <- as.data.frame(stNames)
stNames <- us.states$name
us.state
stNames <- us$name
stNames <- state.name
combined <- as.data.frame(stNames)
j <- 1
i <- 1
while(i <= 51) {
if(dd$ddraw[j] == starbs$starbsraw[i]) {
starbs$dd[i] = dd$ddnums
j <- j + 1
}else {
starbs$dd[i] = 0
}
i <- i + 1
}
while(i <= 51) {
if(dd$ddraw[j] == starbs$starbsraw[i]) {
starbs$dd[i] = dd$ddnums[j]
j <- j + 1
}else {
starbs$dd[i] = 0
}
i <- i + 1
}
while(i <= 51) {
if(dd$ddraw[j] == starbs$starbsraw[i]) {
starbs$dd[i] = dd$ddnums[j]
j <- j + 1
}else {
starbs$dd[i] = 0
}
i <- i + 1
}
j <- 1
i <- 1
while(i <= 51) {
if(dd$ddraw[j] == starbs$starbsraw[i]) {
starbs$dd[i] = dd$ddnums[j]
j <- j + 1
}else {
starbs$dd[i] = 0
}
i <- i + 1
}
j <- 1
i <- 1
while(i <= 51) {
if(j < 46) {
if(dd$ddraw[j] == starbs$starbsraw[i]) {
starbs$dd[i] = dd$ddnums[j]
j <- j + 1
}else {
starbs$dd[i] = 0
}
i <- i + 1
}else {
starbs$dd[i] = 0
i <- i + 1
}
}
pinkState <- 1
j <- 0
for(i in 1:nrow(starbs)) {
if(starbs$dd[i] > starbs$starbsnums[i]) {
pinkState[j] <- starbs$dd[i]
j <- j + 1
}
}
pinkState <- tolower(pinkState)
pinkIndices <-1
j <- 1
flag <- 1
for(i in 1:length(pinkState)) {
flag <- str_detect(m$names, pinkState[i])
for(k in 1:length(flag)) {
if(flag[k]) {
stColors[k] <- "pink"
}
}
}
map("state", fill=TRUE, col = stColors)
map("state", fill=TRUE, col = stColors)
pinkState <- 1
j <- 0
for(i in 1:nrow(starbs)) {
if(starbs$dd[i] > starbs$starbsnums[i]) {
pinkState[j] <- starbs$dd[i]
j <- j + 1
}
}
pinkState
for(i in 1:nrow(starbs)) {
if(starbs$dd[i] > starbs$starbsnums[i]) {
pinkState[j] <- starbs$starbsraw[i]
j <- j + 1
}
}
pinkState <- tolower(pinkState)
pinkIndices <-1
j <- 1
flag <- 1
for(i in 1:length(pinkState)) {
flag <- str_detect(m$names, pinkState[i])
for(k in 1:length(flag)) {
if(flag[k]) {
stColors[k] <- "pink"
}
}
}
pinkIndices
pinkState
pinkState <- 1
j <- 0
for(i in 1:nrow(starbs)) {
if(starbs$dd[i] > starbs$starbsnums[i]) {
pinkState[j] <- starbs$starbsraw[i]
j <- j + 1
}
}
pinkState
pinkState <- tolower(pinkState)
pinkIndices <-1
j <- 1
flag <- 1
for(i in 1:length(pinkState)) {
flag <- str_detect(m$names, pinkState[i])
for(k in 1:length(flag)) {
if(flag[k]) {
stColors[k] <- "pink"
}
}
}
pinkIndices
j <- 1
flag <- 1
for(i in 1:length(pinkState)) {
flag <- str_detect(m$names, pinkState[i])
for(k in 1:length(flag)) {
if(flag[k]) {
stColors[k] <- "pink"
}
}
}
map("state", fill=TRUE, col = stColors)
m$names
j <- 0
for(i in 1:nrow(starbs)) {
if(starbs$dd[i] > starbs$starbsnums[i]) {
pinkState[j] <- starbs$starbsraw[i]
print(starbs$starbsraw[i])
j <- j + 1
}
}
map("state", fill=TRUE, col = stColors, title("Dunkin Donuts VS Starbucks"))
map("state", fill=TRUE, col = stColors, title("Dunkin Donuts VS Starbucks"))
map("state", fill=TRUE, col = stColors)
?map
map("state", fill=TRUE, col = stColors)
map("state", fill=TRUE, col = stColors)
title("Dunkin Donuts VS Starbucks")
legend("topright", leg.txt, horiz = TRUE, fill = colors)
map("state", fill=TRUE, col = stColors)
title("Dunkin Donuts VS Starbucks")
legend("topright", fill = colors)
leg.txt <- c("Dunkin Donuts", "Starbucks")
colors <- c("pink", "dark green")
map("state", fill=TRUE, col = stColors)
title("Dunkin Donuts VS Starbucks")
legend("topright", leg.txt, fill = colors)
#draw the map
leg.txt <- c("Dunkin Donuts", "Starbucks")
colors <- c("pink", "dark green")
map("state", fill=TRUE, col = stColors)
title("Dunkin Donuts VS Starbucks")
legend("bottomright", leg.txt, fill = colors)
shiny::runApp('~/STAT331/finalproj331')
?mod
?abline
runApp('~/STAT331/finalproj331')
library(tidyverse)
load("workspace.Rdata")
countries <- wine %>%
select(country)
countries <- unique(countries)
countries <- sort(countries$country)
varieties <- wine %>%
select(variety)
varieties <- unique(varieties)
varieties <- sort(varieties$variety)
reviewers  <- wine %>%
select(taster_name)
reviewers <- unique(reviewers)
reviewers<- sort(reviewers$taster_name)
panel1 <- tabPanel("Score by Country",
sidebarLayout(
sidebarPanel(
selectInput("selectCountry", label = h3("Country"),
choices = as.list(countries),
selected = "US"),
selectInput("selectVariety", label = h3("Variety"),
choices = c("All", as.list(varieties)),
selected = "All"),
hr()
),
mainPanel(
plotOutput('countryPlot')
)
)
)
panel2 <- tabPanel("Reviewer Scores",
sidebarLayout(
sidebarPanel(
selectInput("selectReviewer", label = h3("Reviewer"),
choices = as.list(reviewers),
selected = "Alexander Peartree"), hr()
),
mainPanel(
plotOutput('reviewPlot')
)
)
)
panel3 <- tabPanel("Quantile Analysis",
sidebarLayout(
sidebarPanel(
selectInput("X Variable", label = h3("X Variable"),
choices = as.list(names(wine[c(-1,-3:-6, -12, -14)])),
selected = "taster_name"),
selectInput("Y Variable", label = h3("Y Variable"),
choices = as.list(names(wine[c(-2:-4,-7:-14)])),
selected = "points"), hr()
),
mainPanel(
plotOutput('quantilePlot')
)
)
)
panel4 <- tabPanel("Regression Analysis",
sidebarLayout(
sidebarPanel(),
mainPanel(
plotOutput('regressionPlot')
)
)
)
navbarPage("Wine Stats!", panel1, panel2, panel3, panel4)
runApp('~/STAT331/finalproj331')
load("workspace.Rdata")
setwd("../finalproj331")
load("workspace.Rdata")
runApp()
View(wine)
USwine <- subset(wine, wine$country == "US")
stateavg <- USwine %>%
group_by(province) %>%
summarize(avgPoints = mean(points))
countries <- wine %>%
select(country)
countries <- unique(countries)
countries <- sort(countries$country)
reviewerList <- wine %>%
select(taster_name)
reviewerList <- unique(reviewerList$taster_name)
reviewers  <- wine %>%
filter(taster_name == "Alexander Peartree")  %>%# the user can switch the name; maybe a toggle dropdown
arrange(desc(points)) %>%
select(taster_name, points, title, region_1)
reviewers <- unique(reviewers)
reviewers<- reviewers %>%
arrange(taster_name)
num_to_display <- 5
View(wine)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mod <- lm(wine$price ~ wine$points)
rst <- rstandard(mod)
fit <- fitted(mod)
regTest <- as.data.frame(rst, fit)
View(regTest)
View(regTest)
regTest <- as.data.frame(rst)
regTest$fit <- fit
runApp()
runApp()
runApp()
