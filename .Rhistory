estimate <- 0
df = 0
if(is.factor(data)) { # compute one sample z-test
data <- as.numeric(data)
estimate <- sum(data == 1) / length(data)
s = sqrt( null * ( 1 - null ) / n )
statistic <- (estimate - null) / s
error <- qnorm(1-(alpha/2))*sqrt(estimate*(1 - estimate)/n)
upper <- estimate + error
lower <- estimate - error
conf.int <- c(lower, upper)
if(alternative=="two-sided") {
pval <- 2*pnorm(abs(statistic))
}else if(alternative=="less") {
if(null > 1 | null < 0) {
print("Error: invalid hypothesized value. Must be between 0 and 1")
return(NA)
}
pval <- pnorm(abs(statistic))
}else { # greater
if(null > 1 | null < 0) {
print("Error: invalid hypothesized value. Must be between 0 and 1")
return(NA)
}
pval <- 1 - pnorm(abs(statistic))
}
cat("Ho: p = ", null, "\n\n")
cat("Test Statistic: ", statistic)
cat(", p-value: ", pval, "\n\n")
cat("Confidence Interval (", conf.int[1], ", ", conf.int[2], ")\n\n")
return (ret <- list("statistic" = statistic, "p.value" = pval,
"conf.int" = conf.int, "estimate" = estimate, null.value = null, "alpha" = alpha))
}else { #compute one sameple t test
estimate <- mean(data)
s = sd(data, na.rm = TRUE)
statistic <- (estimate - null) / (s/n**(1/2))
df <- n - 1
error <- qt(1- (alpha/2),df=df)*s/sqrt(n)
upper <- estimate + error
lower <- estimate - error
conf.int <- c(lower, upper)
if(alternative=="two-sided") {
pval <- 2*pt(statistic, df)
}else if(alternative=="less") {
if(null > 1 | null < 0) {
}
pval <- pt(statistic, df)
}else { # greater
pval <- 1 - pt(statistic, df)
}
}
cat("Ho: mu = ", null, "\n\n")
cat("Test Statistic: ", statistic)
cat(", p-value: ", pval, "\n\n")
cat("Confidence Interval (", conf.int[1], ", ", conf.int[2], ")\n\n")
return (ret <- list("statistic" = statistic, "df" = df, "p.value" = pval,
"conf.int" = conf.int, "estimate" = estimate, null.value = null, "alpha" = alpha))
}
# TEST 1
data <- c(NA, 5:25)
hyp_test(data, null = 16, alpha = .05, alternative = "two-sided")
# TEST 2
data <- factor(c(NA, rep("a", 60), rep("b", 40)))
hyp_test(data, null = .5, alpha = .01, alternative = "greater")
# TEST 3
data <- factor(c(NA, rep("a", 60), rep("b", 40)))
hyp_test(data, null = 1.4, alpha = .01, alternative = "greater")
# TEST 4
data <- 1:10
hyp_test(data, null = 6, alpha = .101, alternative = "greater")
# TEST 5
data <- factor(c(NA, rep("a", 60), rep("b", 40)))
hyp_test(data, null = 0.70, alpha = .02, alternative = "less")
?error
??message
hyp_test <- function(data, null, alpha = 0.05, alternative="two-sided") {
data <- data[!is.na(data)]
n <- length(data)
statistic<- 0
conf.int<- c(1,1)
pval <- 0
estimate <- 0
df = 0
if(is.factor(data)) { # compute one sample z-test
data <- as.numeric(data)
estimate <- sum(data == 1) / length(data)
s = sqrt( null * ( 1 - null ) / n )
statistic <- (estimate - null) / s
error <- qnorm(1-(alpha/2))*sqrt(estimate*(1 - estimate)/n)
upper <- estimate + error
lower <- estimate - error
conf.int <- c(lower, upper)
if(alternative=="two-sided") {
pval <- 2*pnorm(abs(statistic))
}else if(alternative=="less") {
if(null > 1 | null < 0) {
stop("Error: invalid hypothesized value. Must be between 0 and 1")
return(NA)
}
pval <- pnorm(abs(statistic))
}else { # greater
if(null > 1 | null < 0) {
stop("Error: invalid hypothesized value. Must be between 0 and 1")
return(NA)
}
pval <- 1 - pnorm(abs(statistic))
}
cat("Ho: p = ", null, "\n")
cat("Test Statistic: ", statistic)
cat(", p-value: ", pval, "\n")
cat("Confidence Interval (", conf.int[1], ", ", conf.int[2], ")\n")
return (ret <- list("statistic" = statistic, "p.value" = pval,
"conf.int" = conf.int, "estimate" = estimate, null.value = null, "alpha" = alpha))
}else { #compute one sameple t test
estimate <- mean(data)
s = sd(data, na.rm = TRUE)
statistic <- (estimate - null) / (s/n**(1/2))
df <- n - 1
error <- qt(1- (alpha/2),df=df)*s/sqrt(n)
upper <- estimate + error
lower <- estimate - error
conf.int <- c(lower, upper)
if(alternative=="two-sided") {
pval <- 2*pt(statistic, df)
}else if(alternative=="less") {
pval <- pt(statistic, df)
}else { # greater
pval <- 1 - pt(statistic, df)
}
}
cat("Ho: mu = ", null, "\n")
cat("Test Statistic: ", statistic)
cat(", p-value: ", pval, "\n")
cat("Confidence Interval (", conf.int[1], ", ", conf.int[2], ")\n")
return (ret <- list("statistic" = statistic, "df" = df, "p.value" = pval,
"conf.int" = conf.int, "estimate" = estimate, null.value = null, "alpha" = alpha))
}
hyp_test <- function(data, null, alpha = 0.05, alternative="two-sided") {
data <- data[!is.na(data)]
n <- length(data)
statistic<- 0
conf.int<- c(1,1)
pval <- 0
estimate <- 0
df = 0
if(is.factor(data)) { # compute one sample z-test
data <- as.numeric(data)
estimate <- sum(data == 1) / length(data)
s = sqrt( null * ( 1 - null ) / n )
statistic <- (estimate - null) / s
error <- qnorm(1-(alpha/2))*sqrt(estimate*(1 - estimate)/n)
upper <- estimate + error
lower <- estimate - error
conf.int <- c(lower, upper)
if(alternative=="two-sided") {
pval <- 2*pnorm(abs(statistic))
}else if(alternative=="less") {
if(null > 1 | null < 0) {
stop("Error: invalid hypothesized value. Must be between 0 and 1")
# return(NA)
}
pval <- pnorm(abs(statistic))
}else { # greater
if(null > 1 | null < 0) {
stop("Error: invalid hypothesized value. Must be between 0 and 1")
# return(NA)
}
pval <- 1 - pnorm(abs(statistic))
}
cat("Ho: p = ", null, "\n")
cat("Test Statistic: ", statistic)
cat(", p-value: ", pval, "\n")
cat("Confidence Interval (", conf.int[1], ", ", conf.int[2], ")\n")
return (ret <- list("statistic" = statistic, "p.value" = pval,
"conf.int" = conf.int, "estimate" = estimate, null.value = null, "alpha" = alpha))
}else { #compute one sameple t test
estimate <- mean(data)
s = sd(data, na.rm = TRUE)
statistic <- (estimate - null) / (s/n**(1/2))
df <- n - 1
error <- qt(1- (alpha/2),df=df)*s/sqrt(n)
upper <- estimate + error
lower <- estimate - error
conf.int <- c(lower, upper)
if(alternative=="two-sided") {
pval <- 2*pt(statistic, df)
}else if(alternative=="less") {
pval <- pt(statistic, df)
}else { # greater
pval <- 1 - pt(statistic, df)
}
}
cat("Ho: mu = ", null, "\n")
cat("Test Statistic: ", statistic)
cat(", p-value: ", pval, "\n")
cat("Confidence Interval (", conf.int[1], ", ", conf.int[2], ")\n")
return (ret <- list("statistic" = statistic, "df" = df, "p.value" = pval,
"conf.int" = conf.int, "estimate" = estimate, null.value = null, "alpha" = alpha))
}
# load the dataset
salary <- read.csv("SF_Salaries.csv", na.strings = c("Not Provided", "Not provided", ""), header = TRUE)
# load the dataset
salary <- read.csv("SF_Salaries.csv", na.strings = c("Not Provided", "Not provided", ""), header = TRUE)
# load the dataset
salary <- read.csv("SF_Salaries.csv", na.strings = c("Not Provided", "Not provided", ""), header = TRUE)
View(salary)
ggplot() + geom_hist(data=salary, aes(x=TotalPay))
library(dplyr)
library(ggplot2)
ggplot() + geom_hist(data=salary, aes(x=TotalPay))
library(dplyr)
library(ggplot2)
ggplot() + geom_hist(data=salary, aes(x=TotalPay))
ggplot() + geom_histogram(data=salary, aes(x=TotalPay))
?t.test
t.test(salary)
t.test(salary$TotalPay)
options(scipen=999)
options(scipen=999)
ggplot() + geom_histogram(data=salary, aes(x=TotalPay))
?sample
boots <- sample(salary$TotalPay, size=1000, replace = TRUE)
quantile(boots, probs = c(.025, .975))
boots <- replicate(sample(salary$TotalPay, size=1000, replace = TRUE))
boots <- replicate(1000,sample(salary$TotalPay, size=1000, replace = TRUE))
quantile(boots, probs = c(.025, .975))
quantile(salary$TotalPay)
quants <- quantile(salary$TotalPay)
?midhinge
??midhinge
# Midhinge Function
# midhinge is: (Q 1 + Q 3) / 2 according to https://www.thoughtco.com/what-is-the-midhinge-3126246
myMidhinge <- function(data) {
quants <- quantile(data)
return((quants[2] + quants[4]) / 2)
}
Midhinge(salary$TotalPay)
# Midhinge Function
# midhinge is: (Q 1 + Q 3) / 2 according to https://www.thoughtco.com/what-is-the-midhinge-3126246
Midhinge <- function(data) {
quants <- quantile(data)
return((quants[2] + quants[4]) / 2)
}
Midhinge(salary$TotalPay)
# Midhinge Function
# midhinge is: (Q 1 + Q 3) / 2 according to https://www.thoughtco.com/what-is-the-midhinge-3126246
Midhinge <- function(data) {
quants <- quantile(data)
Q1<- quants[2]
Q3 <- quants[4]
return((Q1 + Q3) / 2)
}
Midhinge(salary$TotalPay)
salary <- read.csv("CourseDataSets/SF_Salaries.csv", na.strings = c("Not Provided", "Not provided", ""), header = TRUE)
salary <- read.csv("SF_Salaries.csv", na.strings = c("Not Provided", "Not provided", ""), header = TRUE)
CourseDataSets/
?trim
?Trim
??TRIM
t.test(salary$TotalPay, conf.level = 0.95)
t.test(salary$TotalPay, conf.level = 0.8)
t.test(salary$TotalPay, conf.level = 0.95)
boots <- replicate(1000,sample(salary$TotalPay, size=nrow(salary), replace = TRUE))
quantile(boots, probs = c(.025, .975))
salary <- read.csv("CourseDataSets/SF_Salaries.csv", na.strings = c("Not Provided", "Not provided", ""), header = TRUE)
# boots <- as.tibble(replicate(1000, sample(iris$Petal.Length, size = nrow(iris), replace = TRUE)))
boots <- replicate(1000,sample(salary$TotalPay, size=nrow(salary), replace = TRUE))
# myrange <- function(x) max(x) - min(x)
# myrans <- boots %>%
# summarise_all(myrange) %>%
# gather("varnames", "Value", 1:1000) %>%
# select("Value")
mymids <- boots %>%
summarise_all(Midhinge)
library(dplyr)
library(ggplot2)
mymids <- boots %>%
summarise_all(Midhinge)
boots <- as.tibble(replicate(1000,sample(salary$TotalPay, size=nrow(salary), replace = TRUE)))
library(tibble)
boots <- as.tibble(replicate(1000,sample(salary$TotalPay, size=nrow(salary), replace = TRUE)))
mymids <- boots %>%
summarise_all(Midhinge)
?sample
getwd()
iris
ir <- as.tibble(replicate(1000, sample(iris$Petal.Length, size = nrow(iris), replace = TRUE)))
nrow(iris)
boots <- as.tibble(replicate(1000,sample(salary$TotalPay, size=nrow(salary), replace = TRUE)))
mymids <- boots %>%
summarise_all(Midhinge)
View(boots)
View(boots)
View(mymids)
View(mymids)
mymids <- boots %>%
summarise_all(Midhinge) %>%
gather("varnames", "Value", 1:1000) %>%
select("Value")
library(dplyr)
library(ggplot2)
library(tibble)
library(tidyr)
ir <- as.tibble(replicate(1000, sample(iris$Petal.Length, size = nrow(iris), replace = TRUE)))
boots <- as.tibble(replicate(1000,sample(salary$TotalPay, size=nrow(salary), replace = TRUE)))
# myrange <- function(x) max(x) - min(x)
# myrans <- boots %>%
# summarise_all(myrange) %>%
# gather("varnames", "Value", 1:1000) %>%
# select("Value")
mymids <- boots %>%
summarise_all(Midhinge) %>%
gather("varnames", "Value", 1:1000) %>%
select("Value")
# gather("varnames", "Value", 1:1000) %>%
# select("")
#
# myrans %>%
# ggplot(aes(x = Value)) +
# geom_histogram()
ir <- as.tibble(replicate(1000, sample(iris$Petal.Length, size = nrow(iris), replace = TRUE)))
boots <- as.tibble(replicate(1000,sample(salary$TotalPay, size=nrow(salary), replace = TRUE)))
mymids <- boots %>%
summarise_all(Midhinge) %>%
gather("varnames", "Value", 1:1000) %>%
select("Value")
mymids <- boots %>%
summarise_all(Midhinge) %>%
gather("varnames", "Value", 1:1000) %>%
select("Value")
mymids %>%
ggplot(aes(x = Value)) +
geom_histogram()
t5 <- boots %>%
summarise_all(trimmed(boots,0.05)) %>%
gather("varnames", "Value", 1:1000) %>%
select("Value")
t5 <- boots %>%
summarise_all(Trimmed(boots,0.05)) %>%
gather("varnames", "Value", 1:1000) %>%
select("Value")
Trimmed <- function(data, percentage) {
return(mean(data, trim = percentage))
}
t5 <- boots %>%
summarise_all(Trimmed(boots,0.05)) %>%
gather("varnames", "Value", 1:1000) %>%
select("Value")
summarise_all(Trimmed(boots,0.05))
summarise_all(Trimmed)
View(boots)
t5 <- nrow(1000)
t5 <- c(1:1000)
t5 <- data.frame(c(1:1000))
View(t5)
tmean <- c(1:1000)
t5 <- data.frame(tmean)
View(t5)
Trimmed(boots[1,])
Trimmed(boots[1,], 0.05)
boots[1,]
data = boots[1,]
mean(data, 0.05)
mean(data, trim = 0.05)
data = c(1:10)
mean(data, trim = 0.05)
data = c(1:1000)
data <- boots[1,]
data <- as.vector(data)
data <- as.vector(data)
mean(data, trim = 0.05)
data <- as.matrix(data)
View(data)
View(data)
mean(data, trim = 0.05)
tmean <- c(1:1000)
n <- 148654
t5 <- data.frame(tmean)
for(i in 1:n) {
data <- boots[i,]
data <- as.matrix(data)
t5[i,"tmean"] <- mean(data, trim = 0.05)
}
boots <- as.tibble(replicate(1000,sample(salary$TotalPay, size=nrow(salary/5), replace = TRUE)))
boots <- as.tibble(replicate(1000,sample(salary$TotalPay, size=nrow(salary)/5, replace = TRUE)))
boots <- as.tibble(replicate(1000,sample(salary$TotalPay, size=nrow(salary)/5, replace = TRUE)))
tmean <- c(1:1000)
n <- 148654
t5 <- data.frame(tmean)
for(i in 1:n) {
data <- boots[i,]
data <- as.matrix(data)
t5[i,"tmean"] <- Trimmed(data, 0.05)
}
polylearn
library(swirl)
install_from_swirl("Regression_Models")
swirl()
swirl()
install_from_swirl("Regression_Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
save.image("~/STAT331/CourseDataSets/BonillaR_RML1.RData")
shiny::runApp('~/STAT331/finalproj331')
library(tidyverse)
library(rlang)
wine <- wine %>%
slice(1:40000)
USwine <- subset(wine, wine$country == "US")
USwine <- subset(wine, wine$country == "US")
wine <- read.csv("winemag-data-130k-v2.csv")
getwd()
setwd("..")
getwd()
setwd("finalproj331/")
wine <- read.csv("winemag-data-130k-v2.csv")
library(tidyverse)
library(rlang)
wine <- read.csv("winemag-data-130k-v2.csv")
wine <- wine %>%
slice(1:40000)
USwine <- subset(wine, wine$country == "US")
stateavg <- USwine %>%
group_by(province) %>%
summarize(avgPoints = mean(points))
countries <- wine %>%
select(country)
countries <- unique(countries)
countries <- sort(countries$country)
reviewers <- wine %>%
select(taster_name)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
reviewer <- wine %>%
filter(taster_name == input$selectReviewer)  %>%# the user can switch the name; maybe a toggle dropdown
arrange(desc(points)) %>%
select(taster_name, points, title, region_1)
USwine <- subset(wine, wine$country == input$selectCountry)
reviewers <- wine %>%
select(taster_name)
reviewers <- unique(reviewers)
reviewers<- sort(reviewers$taster_name)
runApp()
runApp()
reviewer <- wine %>%
filter(taster_name == "Alexander Peartree")  %>%# the user can switch the name; maybe a toggle dropdown
arrange(desc(points)) %>%
select(taster_name, points, title, region_1)
View(wine)
runApp()
num_to_display <- 5
reviewer <- reviewer %>%
slice(1:num_to_display)
ggplot(reviewer, aes(x=title, y=points, fill=region_1)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0), legend.position="none") +
geom_bar(stat="identity") + coord_cartesian(ylim = c(80, 100))
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
wine <- read.csv("winemag-data-130k-v2.csv")
View(wine)
View(wine)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabPanel
?sidebarLayout
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?as.list
runApp()
runApp()
runApp()
?read.csv
runApp()
?selectInput
runApp()
runApp()
shiny::runApp()
runApp()
