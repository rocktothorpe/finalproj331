#initialize vars to later be made a data frame
split <- which(charr == "74")
numbers <- 1
city <-1
adr <- 1
state <- 1
date <- 1
i = 1
j = 1;
while(i < 29) {
numbers[j] <- charr[i]
i <- i + 2
city[j] <- charr[i]
i <- i + 1
adr[j] <- charr[i]
i <- i + 1
state[j] <- charr[i]
i <- i + 1
date[j] <-charr[i]
i <- i + 1
j <- j + 1
}
i <- 30
j <- 6
while(i < (split)) {
numbers[j] = charr[i]
i = i + 2
city[j] <- charr[i]
i <- i + 1
adr[j] <- charr[i]
i <- i + 1
state[j] <- charr[i]
i <- i + 1
date[j] <-charr[i]
i <- i + 1
j = j + 1
}
i <- split
j <- j - 1 # 74, where it left off
while(i < length(charr)) {
numbers[j] = charr[i]
i = i + 1
city[j] <- charr[i]
i <- i + 1
adr[j] <- charr[i]
i <- i + 1
state[j] <- charr[i]
i <- i + 1
date[j] <-charr[i]
i <- i + 1
j = j + 1
}
ino <- data.frame(numbers, city, adr, state, date, stringsAsFactors = FALSE)
ino[5, "date"] <- (charr[29])
ino[5,"state"] <- "CA"
# get rid of whitespace
ino$state<-str_trim(ino$state, side="both")
# use the R pre-loaded state stuff
ino$fullState <- state.name[match(ino$state, state.abb)]
ggplot() + geom_bar(data=ino, aes(x=state)) + ggtitle("Distribution of the State Variable")
# In-N-Out is mostly in CA, however, they are also in 5 other states.
#clean up cities strings
ino$city <-str_trim(ino$city, side="left")
# add space and state onto city
ino$cityState <- paste(ino$city, ino$state, sep = " ")
us.cities$long[which(us.cities$name == "Long Beach CA")]
temp <- 1
# get farthest east in n out
# initialize variables
maxlonge = -10000
east <- "hi"
for(i in 1:length(ino$cityState)) {
temp <- us.cities$long[which(us.cities == ino$cityState[i])]
if(length(temp) >= 1) { # kept getting error when longitude not found
if(temp > maxlonge) {
maxlonge <- temp
east <- ino$cityState[i]
}
}
}
east
# Garland, TX is the eastern-most In-N-Out location
# get number of each states ino's
num.ino <- table(ino$fullState)
num.ino <- as.data.frame(num.ino)
pal <- brewer.pal(6, 'YlOrRd')
pal <- rev(pal)
num.ino$cols <- pal
colOrder <- c(pal[3], pal[1], pal[4],pal[6], pal[2], pal[5]) # what is the better way to do this?!
map("state", regions = num.ino$Var1, fill=TRUE, col = colOrder)
#get the data
dd <-"https://www.menuism.com/restaurant-locations/dunkin-donuts-181624/us"
ddlink <- read_html(dd)
ddhtml <- html_nodes(ddlink, css=".list-unstyled-links a") # get this with sel gadget
ddtext <- html_text(ddhtml)
ddraw <- ddtext
starbs <-"https://www.menuism.com/restaurant-locations/starbucks-coffee-39564/us"
starbslink <- read_html(starbs)
starbshtml <- html_nodes(starbslink, css=".list-unstyled-links a") # get this with sel gadget
starbstext <- html_text(starbshtml)
starbsraw <- starbstext
# extract number of locations
ddnums <- str_extract_all(ddraw, "\\([^()]+\\)") # get number with parentheses
ddnums <- substring(ddnums, 2, nchar(ddnums)-1) # get rid of parentheses
ddnums <- as.numeric(ddnums)
starbsnums <- str_extract_all(starbsraw, "\\([^()]+\\)") # get number with parentheses
starbsnums <- substring(starbsnums, 2, nchar(starbsnums)-1) # get rid of parentheses
starbsnums <- as.numeric(starbsnums)
#extract state names
ddraw <- str_replace(ddraw, "Dunkin' Donuts locations", "")
ddraw <- str_replace(ddraw, "\\([^()]+\\)", "")
ddraw <-str_trim(ddraw, side="right")
starbsraw <- str_replace(starbsraw, "Starbucks Coffee locations", "")
starbsraw <- str_replace(starbsraw, "\\([^()]+\\)", "")
starbsraw <-str_trim(starbsraw, side="right")
# put all data into a df
dd <- data.frame(ddraw, ddnums, stringsAsFactors = FALSE)
starbs <- data.frame(starbsraw, starbsnums, stringsAsFactors = FALSE)
# get num of states in map
m <- map("state")
mapsize <- length(m$names)
# initialize color array
stColors <- "green"
for(i in 1:mapsize) {
stColors[i] <- "dark green"
}
# get states where DD > Starbs
pinkState <- 1
j <- 0
for(i in 1:nrow(starbs)) {
if(dd$ddraw == sta)
if(dd$ddnums[i] > starbs$starbsnums[i]) {
pinkState[j] <- dd$ddraw[i]
j <- j + 1
}
}
stNames <- us.cities
combined <- as.data.frame(stNames)
View(combined)
stNames <- us.cities$name
combined <- as.data.frame(stNames)
stNames <- us.states$name
us.state
stNames <- us$name
stNames <- state.name
combined <- as.data.frame(stNames)
j <- 1
i <- 1
while(i <= 51) {
if(dd$ddraw[j] == starbs$starbsraw[i]) {
starbs$dd[i] = dd$ddnums
j <- j + 1
}else {
starbs$dd[i] = 0
}
i <- i + 1
}
while(i <= 51) {
if(dd$ddraw[j] == starbs$starbsraw[i]) {
starbs$dd[i] = dd$ddnums[j]
j <- j + 1
}else {
starbs$dd[i] = 0
}
i <- i + 1
}
while(i <= 51) {
if(dd$ddraw[j] == starbs$starbsraw[i]) {
starbs$dd[i] = dd$ddnums[j]
j <- j + 1
}else {
starbs$dd[i] = 0
}
i <- i + 1
}
j <- 1
i <- 1
while(i <= 51) {
if(dd$ddraw[j] == starbs$starbsraw[i]) {
starbs$dd[i] = dd$ddnums[j]
j <- j + 1
}else {
starbs$dd[i] = 0
}
i <- i + 1
}
j <- 1
i <- 1
while(i <= 51) {
if(j < 46) {
if(dd$ddraw[j] == starbs$starbsraw[i]) {
starbs$dd[i] = dd$ddnums[j]
j <- j + 1
}else {
starbs$dd[i] = 0
}
i <- i + 1
}else {
starbs$dd[i] = 0
i <- i + 1
}
}
pinkState <- 1
j <- 0
for(i in 1:nrow(starbs)) {
if(starbs$dd[i] > starbs$starbsnums[i]) {
pinkState[j] <- starbs$dd[i]
j <- j + 1
}
}
pinkState <- tolower(pinkState)
pinkIndices <-1
j <- 1
flag <- 1
for(i in 1:length(pinkState)) {
flag <- str_detect(m$names, pinkState[i])
for(k in 1:length(flag)) {
if(flag[k]) {
stColors[k] <- "pink"
}
}
}
map("state", fill=TRUE, col = stColors)
map("state", fill=TRUE, col = stColors)
pinkState <- 1
j <- 0
for(i in 1:nrow(starbs)) {
if(starbs$dd[i] > starbs$starbsnums[i]) {
pinkState[j] <- starbs$dd[i]
j <- j + 1
}
}
pinkState
for(i in 1:nrow(starbs)) {
if(starbs$dd[i] > starbs$starbsnums[i]) {
pinkState[j] <- starbs$starbsraw[i]
j <- j + 1
}
}
pinkState <- tolower(pinkState)
pinkIndices <-1
j <- 1
flag <- 1
for(i in 1:length(pinkState)) {
flag <- str_detect(m$names, pinkState[i])
for(k in 1:length(flag)) {
if(flag[k]) {
stColors[k] <- "pink"
}
}
}
pinkIndices
pinkState
pinkState <- 1
j <- 0
for(i in 1:nrow(starbs)) {
if(starbs$dd[i] > starbs$starbsnums[i]) {
pinkState[j] <- starbs$starbsraw[i]
j <- j + 1
}
}
pinkState
pinkState <- tolower(pinkState)
pinkIndices <-1
j <- 1
flag <- 1
for(i in 1:length(pinkState)) {
flag <- str_detect(m$names, pinkState[i])
for(k in 1:length(flag)) {
if(flag[k]) {
stColors[k] <- "pink"
}
}
}
pinkIndices
j <- 1
flag <- 1
for(i in 1:length(pinkState)) {
flag <- str_detect(m$names, pinkState[i])
for(k in 1:length(flag)) {
if(flag[k]) {
stColors[k] <- "pink"
}
}
}
map("state", fill=TRUE, col = stColors)
m$names
j <- 0
for(i in 1:nrow(starbs)) {
if(starbs$dd[i] > starbs$starbsnums[i]) {
pinkState[j] <- starbs$starbsraw[i]
print(starbs$starbsraw[i])
j <- j + 1
}
}
map("state", fill=TRUE, col = stColors, title("Dunkin Donuts VS Starbucks"))
map("state", fill=TRUE, col = stColors, title("Dunkin Donuts VS Starbucks"))
map("state", fill=TRUE, col = stColors)
?map
map("state", fill=TRUE, col = stColors)
map("state", fill=TRUE, col = stColors)
title("Dunkin Donuts VS Starbucks")
legend("topright", leg.txt, horiz = TRUE, fill = colors)
map("state", fill=TRUE, col = stColors)
title("Dunkin Donuts VS Starbucks")
legend("topright", fill = colors)
leg.txt <- c("Dunkin Donuts", "Starbucks")
colors <- c("pink", "dark green")
map("state", fill=TRUE, col = stColors)
title("Dunkin Donuts VS Starbucks")
legend("topright", leg.txt, fill = colors)
#draw the map
leg.txt <- c("Dunkin Donuts", "Starbucks")
colors <- c("pink", "dark green")
map("state", fill=TRUE, col = stColors)
title("Dunkin Donuts VS Starbucks")
legend("bottomright", leg.txt, fill = colors)
ggplot(df, aes(x=workdays, y=commits)) + geom_point() +
geom_line() + geom_line(aes(y = meanCommits, colour="Mean Commits"), colour="green") + geom_line(aes(y=ulimit, colour="Upper Limit"), colour="red") +
geom_line(aes(y=llimit, colour="Lower Limit"), colour="red") + ggtitle("Software Anaylitics for PolyPong") + xlab("Workday #") +
ylab("Number of Commits") + ggsave(g, height = 7 , width = 7 * aspect_ratio)
library(ggplot2)
library(dplyr)
library(plotly)
install.packages("plotly")
library(plotly)
commits <- c(27, 6, 4, 18, 6);
workdays <- c(1, 2, 3, 4, 5 );
meanCommits = mean(commits)
commitSD <- sd(commits)
ulimit <- meanCommits + 3 * commitSD
llimit <- 0
plot(commits~workdays, pch=16, main="Software Analytics", xlab ="Release #")
abline(h = c(meanCommits, ulimit, llimit), col=c("green", "red", "red"))
df <- as.data.frame(commits)
df$wordays <- workdays
aspect_ratio <- 2.5
height <- 7
ggplot(df, aes(x=workdays, y=commits)) + geom_point() +
geom_line() + geom_line(aes(y = meanCommits, colour="Mean Commits"), colour="green") + geom_line(aes(y=ulimit, colour="Upper Limit"), colour="red") +
geom_line(aes(y=llimit, colour="Lower Limit"), colour="red") + ggtitle("Software Anaylitics for PolyPong") + xlab("Workday #") +
ylab("Number of Commits") + ggsave(g, height = 7 , width = 7 * aspect_ratio)
g <- ggplot(df, aes(x=workdays, y=commits)) + geom_point() +
geom_line() + geom_line(aes(y = meanCommits, colour="Mean Commits"), colour="green") + geom_line(aes(y=ulimit, colour="Upper Limit"), colour="red") +
geom_line(aes(y=llimit, colour="Lower Limit"), colour="red") + ggtitle("Software Anaylitics for PolyPong") + xlab("Workday #") +
ylab("Number of Commits")
ggsave(g, height = 7 , width = 7 * aspect_ratio)
g <- ggplot(df, aes(x=workdays, y=commits)) + geom_point() +
geom_line() + geom_line(aes(y = meanCommits, colour="Mean Commits"), colour="green") + geom_line(aes(y=ulimit, colour="Upper Limit"), colour="red") +
geom_line(aes(y=llimit, colour="Lower Limit"), colour="red") + ggtitle("Software Anaylitics for PolyPong") + xlab("Workday #") +
ylab("Number of Commits")
g
shiny::runApp('~/STAT331/finalproj331')
runApp('~/STAT331/finalproj331')
runApp('~/STAT331/finalproj331')
runApp('~/STAT331/finalproj331')
panel4 <- tabPanel("Regression Analysis",
sidebarLayout(
sidebarPanel(
sliderInput("Ymax", label = h3("Y Maximum"),
min = 0, max = 3000, value = 3000)
),
mainPanel(
plotOutput('regressionPlot')
)
)
)
runApp('~/STAT331/finalproj331')
runApp('~/STAT331/finalproj331')
runApp('~/STAT331/finalproj331')
runApp('~/STAT331/finalproj331')
runApp('~/STAT331/finalproj331')
runApp('~/STAT331/finalproj331')
runApp('~/STAT331/finalproj331')
library(stringr)
runApp('~/STAT331/finalproj331')
load("workspace.Rdata")
getwd()
setwe(../finalproject331)
setwd(../finalproject331)
setwd("../fina|proj331")
setwd("../fina|proj331")
getwd()
setwd("../")
getwd()
setwd("finalproj331")
load("workspace.Rdata")
View(wine)
load("workspace.Rdata")
load("workspace.Rdata")
wine=
# For wine points / country graph
USwine <- subset(wine, wine$country == "US")
stateavg <- USwine %>%
group_by(province) %>%
summarize(avgPoints = mean(points))
countries <- wine %>%
select(country)
countries <- unique(countries)
countries <- sort(countries$country)
reviewerList <- wine %>%
select(taster_name)
reviewerList <- unique(reviewerList$taster_name)
reviewers  <- wine %>%
filter(taster_name == "Alexander Peartree")  %>%# the user can switch the name; maybe a toggle dropdown
arrange(desc(points)) %>%
select(taster_name, points, title, region_1)
reviewers <- unique(reviewers)
reviewers<- reviewers %>%
arrange(taster_name)
num_to_display <- 5
mod <- lm(wine$price ~ wine$points)
rst <- rstandard(mod)
fit <- fitted(mod)
regTest <- as.data.frame(rst)
regTest$fit <- fit
function(input, output, session) {
output$countryPlot <- renderPlot({
if(input$selectVariety == "All")
USwine <- subset(wine, wine$country == input$selectCountry)
if(input$selectVariety != "All")
USwine <- subset(wine, wine$country == input$selectCountry & wine$variety == input$selectVariety)
stateavg <- USwine %>%
group_by(province) %>%
summarize(avgPoints = mean(points))
ggplot(stateavg, aes(x=province, y = avgPoints, fill = province)) +
geom_bar(stat = "identity") + coord_cartesian(ylim = c(min(stateavg$avgPoints) - 2, max(stateavg$avgPoints) + 2)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0), legend.position="none") +
labs(title = paste("Mean Points of", input$selectVariety, "Wines reviewed by Region of", input$selectCountry), x = "Region", y ="Mean Points Earned")
})
output$reviewPlot <- renderPlot({
reviewers  <- wine %>%
filter(taster_name == input$selectReviewer)  %>%# the user can switch the name; maybe a toggle dropdown
arrange(desc(points)) %>%
select(taster_name, points, title, region_1)
#
# # make this a widget as well
num_to_display <- 5
#
reviewers <- reviewers %>%
slice(1:num_to_display)
ggplot(reviewers, aes(x=title, y=points, fill=region_1)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0), legend.position="none") +
geom_bar(stat="identity") + coord_cartesian(ylim = c(80, 100)) +
labs(title = "Points by Reviewer", x = "Wine", y ="Points") + scale_x_discrete(labels = function(x) str_wrap(title, width = 10))
})
output$quantilePlot <- renderPlot({
ggplot(wine, aes(x = eval(parse(text = input$`X Variable`)), y = eval(parse(text = input$`Y Variable`)),
fill = eval(parse(text = input$`X Variable`)))) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0), legend.position="none")
})
output$regressionPlot <- renderPlot({
# plot lmreg line for price vs points
ggplot(wine, aes(x=points, y=price)) + geom_point() + stat_smooth(method = "lm", col = "red") +
coord_cartesian(ylim = c(0, 250))
# plot(wine$price ~ wine$points)
# abline(lm( wine$price ~ wine$points, data=wine))
mod <- lm(wine$price ~ wine$points)
rst <- rstandard(mod)
fit <- fitted(mod)
# plot(rst~fit, main="Standardized Residuals vs Fitted Value", ylab ="Standardized Residuals", xlab="Fitted Value")
ggplot(regTest, aes(x = fit, y = rst)) + geom_point(ylab = "Standardized Residuals", xlab ="Fitted Value") + coord_cartesian(ylim = c(0, input$Ymax)) +
geom_smooth()
# ggplot(regTest, aes(x = rst)) + geom_histogram(stat="count")
})
}
?read_csv
?read.csv
wine <- read.csv("../CourseDataSets/wine-reviews/winemag-data-130k-v2.csv", stringsAsFactors = F)
runApp()
runApp()
save.image("~/STAT331/finalproj331/wineChr.RData")
runApp()
runApp()
?geom_smooth
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("pastecs")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("networkD3")
runApp()
runApp()
runApp()
